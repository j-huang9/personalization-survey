import streamlit as st
from openai import OpenAI
from pymongo import MongoClient
from pymongo.server_api import ServerApi
import pandas as pd 

client = OpenAI(api_key=st.secrets["OPENAI_API_KEY"])
mongo_client = MongoClient(
    st.secrets["MONGODB_URI"],
    server_api=ServerApi('1')
)

# select your database and collection
db = mongo_client["personalized_marketing_survey"]
collection = db["responses"]

# initialize page state
if "page" not in st.session_state:
    st.session_state.page = 1
if "participant_info" not in st.session_state:
    st.session_state.participant_info = {}
if "ads" not in st.session_state:
    st.session_state.ads = []
if "current_ad" not in st.session_state:
    st.session_state.current_ad = 0
if "responses" not in st.session_state:
    st.session_state.responses = []

# page 1: survey introduction
if st.session_state.page == 1:
    st.set_page_config(
        page_title="Marketing Personalization Survey",
        page_icon="üì¢"
    )
    st.title("Marketing Personalization Survey")
    st.markdown("""
        ### About the Researcher  
    Hi! My name is Jenna Huang, and I am conducting this project as part of my independent research work.  

    ### Purpose of the Study  
    The purpose of this study is to understand how people perceive different types of personalized advertisements.  
    Specifically, I am studying how varying levels of personalization affect how ads are perceived in terms of:  
    - **Relevance** 
    - **Creepiness** (how unsettling the ad feels)  
    - **Likelihood of engaging**  
    - **Purchase intention**  

    ### What Participation Involves  
    If you participate, you will:  
    - Provide some basic information (first name, age, city, and gender).  
    - View 15 advertisements that are **AI-generated** using your information.  
    - Rate each ad on the four criteria listed above.  
      
    This should take about **10 minutes**.  

    ### Risks  
    - Some ads may feel uncomfortably personal because they are generated using your details.  
    - Since ads are generated by AI, there is a small chance they may contain unexpected or inappropriate language.  
    - Please note that **I am not responsible for the exact wording of AI-generated ads.**  

    ### Benefits  
    - You will not receive direct compensation.  
    - While there may not be direct personal benefits, your participation will help researchers better understand how personalized advertising is perceived, which could inform future marketing practices and improve user experience.


    ### Confidentiality  
    - All responses are **kept confidential**.  
    - Data is stored securely in a password-protected database (MongoDB).  
    - No identifying information will be shared outside the research team.  
    - Any publications or reports will only include **anonymized data**.  

    ### Important Notes  
    - You must be **18 years or older** to participate.  
    - Participation is voluntary, and you may stop at any time.  
    """)
# start button leads to participant info page    
    if st.button("Let's get started"):
        st.session_state.page = 2

# page 2: participant info
elif st.session_state.page == 2:
    st.header("üë§ Participant Information")
    
    with st.form("participant_info_form"):
        name = st.text_input("First Name")
        location = st.text_input("City of Residence")
        age = st.number_input("Age", min_value=18, max_value=110)
        gender = st.selectbox("Gender", ["Male", "Female", "Other"])
        purchase_intent = st.text_input(
            "Optional: Are you currently looking to purchase anything online? If so, what?"
        )
        submit_button = st.form_submit_button("Next")
   # stores answers in participant_info 
    if submit_button:
        if name and location and age and gender:
            st.session_state.participant_info = {
                "Name": name,
                "Location": location,
                "Age": age,
                "Gender": gender,
                "Purchase Intent": purchase_intent
            }
        if not st.session_state.ads:
            purchase_intent = st.session_state.participant_info.get("Purchase Intent", "").strip()
            # if item is mentioned in purchase intent question, it will be occasionally included in product advertisements
            if purchase_intent:
                product_list = f"t-shirts, shoes, hats, skincare, watches, phones, jacket, backpack, headphones, drinks, and occasionally the product they are currently interested in purchasing: {purchase_intent}."
            else:
                product_list = "t-shirts, shoes, hats, skincare, watches, phones, jacket, backpack, headphones, drinks."    
            prompt = f"""
        Generate 15 one-sentence personalized advertisements for these products: {product_list}
        Pick a random product for each advertisement you generate.

        Personalize each ad using these features from the survey: {st.session_state.participant_info}
        You don't have to strictly use all the details as-is; make the advertisement catchy and attractive (use emojis commonly found in advertisements, including üî• üëÄ ‚ö°Ô∏è ‚ú®). The age doesn't have to be included if not relevant, but use it for creating relevant context. Change the structure/phrasing of each advertisement so the personalized features are not obvious. The features should not be right at the beginning of every advertisement. The creepiness should get higher as more features are included, and the ads will be concerningly more personalized

        Output 15 different advertisements in a JSON format. 4 of those will only use one personalised feature - Name, Age, Location, gender. 6 will use two features - (Name, Age), (Age, Location), (Name, Location) (Name, gender), (Age, gender), (Location, gender). 4 will use three features - (Name, Age, Gender), (Age, Location, Gender), (Name, Location, Gender), (Name, Age, Location). The last one will use all 4 features - (Name, Age, Location, Gender).

        Output as a JSON dictionary where the key is a comma-separated string of the features used (e.g. "Name,Location") and the value is the advertisement string. Strictly output valid JSON, no extra text.
        """
        with st.spinner("Generating personalized ads‚Ä¶ this may take up to a minute‚Ä¶ "):
            try:
                response = client.chat.completions.create(
                    model="gpt-5-mini", 
                    messages=[{"role": "user", "content": prompt}],
                )
                ad_text = response.choices[0].message.content
                import json
                ads_json = json.loads(ad_text)
                ads_list = list(ads_json.values()) if isinstance(ads_json, dict) else ads_json
                st.session_state.ads = ads_list
            except Exception as e:
                st.error(f"OpenAI request failed: {e}")
                st.stop()
        st.session_state.page = 3
    else:
        st.error("Please fill in all required fields.")
        
# page 3: rating advertisements
elif st.session_state.page == 3:

    if st.session_state.current_ad < len(st.session_state.ads):
        ad_text = st.session_state.ads[st.session_state.current_ad]

        # Display ad 
        st.markdown(f"## {ad_text}", unsafe_allow_html=True)

        # Four columns for all sliders
        col1, col2, col3, col4 = st.columns(4)

        with col1:
            st.markdown("**Creepiness**")
            st.caption("1=Not creepy, 5=Extremely creepy")
            creepiness = st.slider("", 1, 5, 3, key=f"creepiness_{st.session_state.current_ad}")

        with col2:
            st.markdown("**Personal Relevance**")
            st.caption("1=Not tailored, 5=Extremely tailored")
            personal_relevance = st.slider("", 1, 5, 3, key=f"personal_relevance_{st.session_state.current_ad}")

        with col3:
            st.markdown("**Click Intention**")
            st.caption("1=Very unlikely, 5=Very likely")
            click_intention = st.slider("", 1, 5, 3, key=f"click_intention_{st.session_state.current_ad}")

        with col4:
            st.markdown("**Purchase Intention**")
            st.caption("1=Very unlikely, 5=Very likely")
            purchase_intention = st.slider("", 1, 5, 3, key=f"purchase_intention_{st.session_state.current_ad}")

        # Next button
        if st.button("Next"):
            # Append local response
            st.session_state.responses.append({
                "ad": ad_text,
                "creepiness": creepiness,
                "personal_relevance": personal_relevance,
                "click_intention": click_intention,
                "purchase_intention": purchase_intention
            })

            # Prepare document for MongoDB
            user_doc = {
                "participant_info": st.session_state.participant_info,
                "responses": st.session_state.responses
            }

            # Save/update in MongoDB
            try:
                collection.update_one(
                    {"participant_info.Name": st.session_state.participant_info["Name"]},
                    {"$set": user_doc},
                    upsert=True
                )
            except Exception as e:
                st.error(f"Failed to save to database: {e}")

            st.session_state.current_ad += 1
            st.rerun()

    else:
        st.success("You‚Äôve completed the survey! üéâ Thank you for your participation.")
